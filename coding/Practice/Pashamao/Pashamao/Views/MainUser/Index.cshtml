@{ Layout = "~/Views/Shared/MainHomeLayout.cshtml"; }
@{
    ViewBag.Title = "使用者管理";
}
<body>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="~/css/MainUser.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <main>
        <h1 class="text-center mb-3">@ViewBag.Title</h1>
        <table id="userTable" class="table" style="table-layout:fixed" border="1">
            <thead>
                <tr>
                    <th>
                        <button type="button" id="btnAdd" class="btn btn-outline-dark" onclick='location.href="/MainUser/CreateUser"'>新增</button>
                        <button type="button" id="btnGetAllUser" class="btn btn-outline-dark" onclick='getAllUser()'>查詢全部</button>
                    </th>
                    <th class="text-lg-end">
                        <label>輸入搜尋ID</label>
                    </th>
                    <th>
                        <input type="text" id="txbSelectUserId" style="width:100%" pattern="^[\d]{1,8}$" required />
                    </th>
                    <th class="text-lg-start">
                        <button type="button" id="btnSelectByUserId" class="btn btn-outline-dark" onclick='selectUser();'>搜尋</button>
                    </th>
                    <th>
                        <span id="searchWarning" class="text-danger"></span>
                    </th>
                </tr>
                <tr class="bg-gradient text-bg-dark ">
                    <th scope="col">#</th>
                    <th scope="col">Id<button id="sortById" class="btn btnSort" onclick="sortByColumn('sortById', 'UserId')"></button></th>
                    <th scope="col">帳號</th>
                    <th scope="col">姓名</th>
                    <th scope="col">狀態<button id="sortByStatus" class="btn btnSort" onclick="sortByColumn('sortByStatus', 'Status')"></button></th>
                    <th scope="col">角色<button id="sortByRole" class="btn btnSort" onclick="sortByColumn('sortByRole', 'RoleId')"></button></th>
                    <th scope="col">操作選項</th>
                </tr>
            </thead>
            <tbody>
                <!-- 用來插入用戶資料的行將在這裡 -->
            </tbody>
        </table>
        <script>
            getAllUser();

            function getAllUser() {
                axios.post("/MainUser/GetAllUser")
                    .then(response => {
                        populateTable(response.data);
                    })
                    .catch(error => {
                        console.error("fail", error);
                    })
            }

            function populateTable(users) {
                const tableBody = document.getElementById("userTable").getElementsByTagName('tbody')[0];

                // 清空表格（如果之前有數據）
                tableBody.innerHTML = '';

                // 遍歷所有用戶，並創建相應的表格行
                users.forEach((user, index) => {
                    const row = document.createElement('tr');  // 創建一行
                    //不想顯示可以用

                    // 創建並填充表格單元格
                    const rowSort = document.createElement('th');
                    rowSort.textContent = index + 1;
                    rowSort.scope = "row";
                    row.appendChild(rowSort);

                    const cellId = document.createElement('td');
                    cellId.textContent = user.UserId;

                    row.appendChild(cellId);

                    const cellAcct = document.createElement('td');
                    cellAcct.textContent = user.Account;
                    row.appendChild(cellAcct);

                    const cellName = document.createElement('td');
                    cellName.textContent = user.Name;
                    row.appendChild(cellName);

                    const cellStatus = document.createElement('td');
                    cellStatus.textContent = user.Status ? "啟用" : "禁用";
                    row.appendChild(cellStatus);

                    const cellRoleId = document.createElement('td');
                    cellRoleId.textContent = user.RoleId;
                    row.appendChild(cellRoleId);

                    const cellEdit = document.createElement('td');

                    const cellEditBtn = document.createElement("button");
                    cellEditBtn.className = "btnEditUser";
                    cellEditBtn.addEventListener("click", function () {
                        let NameOrAcct = document.getElementById("boxPersonalName").innerText;
                        editUserRoleAndStatus(user.UserId, NameOrAcct, user.RoleId, user.Status);
                    });
                    cellEdit.appendChild(cellEditBtn);

                    const cellDeleteBtn = document.createElement("button");
                    cellDeleteBtn.className = "btnDeleteUser";
                    cellDeleteBtn.addEventListener("click", function () {
                        delUser(user.UserId);
                    });
                    cellEdit.appendChild(cellDeleteBtn);

                    if (user.RoleId != "1") {
                        row.appendChild(cellEdit);
                    }


                    // 把這一行加到表格中
                    tableBody.appendChild(row);
                });
            }

            function delUser(userId) {
                Swal.fire({
                    title: '確定要刪除這個項目嗎？',
                    text: "這個操作無法恢復！",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: '刪除',
                    cancelButtonText: '取消'
                }).then((result) => {
                    if (result.isConfirmed) {
                        axios.post("/MainUser/DeleteUser", { UserId: userId })
                            .then(response => {
                                window.location.href = '/MainUser/Index';
                            })
                            .catch(error => { console.error(error) })
                    }
                })
            }

            function selectUser() {
                var searchInput = document.getElementById('txbSelectUserId');
                var selectUserId = searchInput.value;
                var regex = new RegExp(searchInput.pattern);
                var inputValue = searchInput.value;
                if (!regex.test(inputValue)) {
                    document.getElementById("searchWarning").innerText = "請輸入8位以內數字";
                    return;
                }
                document.getElementById("searchWarning").innerText = " ";

                axios.post("/MainUser/SelectUser", { UserId: selectUserId })
                    .then(response => {
                        let users = response.data;
                        if (!(users == "noUser")) {

                            if (!Array.isArray(users)) {
                                users = [users];  // 如果是單一物件，將其包裝成陣列
                            }

                            populateTable(users);
                        }
                        else {
                            document.getElementById("userTable").getElementsByTagName('tbody')[0].innerHTML = "";
                        }

                    })
                    .catch(error => {
                        console.error("fail", error);
                    })
            }

            function editUserRoleAndStatus(userId, nameOrAcct, userRoleId, userStatus) {
                let roleSelectOptions;
                let statusSelectOptions;

                if (userStatus) {
                    statusSelectOptions = `<option value="1" selected>啟用</option>` + `<option value="0" >禁用</option>`;
                } else {
                    statusSelectOptions = `<option value="1" >啟用</option>` + `<option value="0" selected>禁用</option>`;
                }

                axios.post("/UserRole/GetAllRole")
                    .then(response => {
                        roleSelectOptions = populateRoleOptionData(response.data, userRoleId);
                        Swal.fire({
                            title: '修改使用者',
                            html: `
                             <label for="roleSelect">選擇角色:</label>
                             <select id="roleSelect" class="swal-selectRole">
                                ${roleSelectOptions}
                             </select>
                             <br><br>
                             <label for="statusSelect">選擇狀態:</label>
                             <select id="statusSelect" class="swal-selectStatus">
                                ${statusSelectOptions}
                             </select>`
                            ,
                            icon: 'question',
                            background: '#f0f0f0',
                            showCancelButton: true,
                            confirmButtonText: '確定',
                            cancelButtonText: '取消',
                            preConfirm: () => {
                                const roleSelectValue = document.getElementById('roleSelect').value;
                                const statusSelectValue = document.getElementById('statusSelect').value;
                                return { roleSelect: roleSelectValue, statusSelect: statusSelectValue };
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                axios.post("/MainUser/SubmitEditUserRole", {
                                    UserId: userId,
                                    RoleId: result.value.roleSelect,
                                    Status: result.value.statusSelect
                                })
                                    .then(response => {
                                        window.location.href = "/MainUser/Index"
                                    })
                                    .catch(error => {
                                        console.error("fail", error);
                                    })
                            }
                        });
                    })
                    .catch(error => {
                        console.error("fail", error);
                    })
            }

            function populateRoleOptionData(roles, roleId) {
                let selectOptions = '';
                roles.forEach(role => {
                    if (role.RoleId != "1") {
                        if (role.RoleId === roleId) {
                            selectOptions += `<option value="${role.RoleId}" selected>角色名：${role.Name}</option>`;//－權限描述：${role.Description}
                        } else {
                            selectOptions += `<option value="${role.RoleId}">角色名：${role.Name}</option>`;
                        }
                    }
                });
                return selectOptions;
            }

            function sortByColumn(id, column) {
                let btn = document.querySelector(`#${id}`);
                let currentBackground = getComputedStyle(btn).backgroundImage;
                let data = getTableElelments();
                let sortedData;

                if (currentBackground.includes('arrowAscending.png')) {
                    sortedData = sortData(data, column, false);
                    btn.style.backgroundImage = "url('../images/arrowDescending.png')";
                } else {
                    sortedData = sortData(data, column, true);
                    btn.style.backgroundImage = "url(../images/arrowAscending.png)";
                }

                populateTable(sortedData);
            }

            function getTableElelments() {
                const table = document.getElementById("userTable");
                const rows = table.querySelectorAll("tbody tr");
                const headers = ["UserId", "Account", "Name", "Status", "RoleId"];

                const data = Array.from(rows).map(row => {
                    const cells = row.querySelectorAll("td");
                    const obj = {};

                    //狀態設置為1/0
                    if (cells[3].innerText === "啟用") {
                        cells[3].innerText = 1;
                    } else if (cells[3].innerText === "禁用") {
                        cells[3].innerText = 0;
                    }

                    for (var i = 0; i < 5; i++) {
                        obj[headers[i]] = isNaN(cells[i].innerText) ? cells[i].innerText : Number(cells[i].innerText);
                    }

                    return obj;
                });
                return data
            }

            function sortData(data, column, ascending = true) {
                return data.sort((a, b) => {
                    if (a[column] < b[column]) return ascending ? -1 : 1;
                    if (a[column] > b[column]) return ascending ? 1 : -1;
                    return 0;
                });
            }

        </script>
    </main>
</body>

