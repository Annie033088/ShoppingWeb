@{ Layout = "~/Views/Shared/MainHomeLayout.cshtml"; }
@{
    ViewBag.Title = "會員管理";
}
<body>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link href="~/css/MainMember.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <main>
        <h1 class="text-center mb-3">@ViewBag.Title</h1>
        <table id="memberTable" class="table" style="table-layout:fixed" border="1">
            <thead>
                <tr>
                    <th style="display:flex">
                        <button type="button" id="btnAdd" class="btn btn-outline-dark" onclick='location.href="/MainMember/CreateMember"'>新增</button>
                        <button type="button" id="btnGetAllMember" class="btn btn-outline-dark" onclick='getAll()'>查詢全部</button>
                    </th>
                    <th class="text-lg-end">
                        <label>輸入搜尋ID</label>
                    </th>
                    <th>
                        <input type="text" id="txbSelectMemberId" style="width:100%" pattern="^[\d]{1,8}$" required />
                    </th>
                    <th class="text-lg-start">
                        <button type="button" id="btnSelectByMemberId" class="btn btn-outline-dark" onclick='selectMember("txbSelectMemberId", "MemberId");'>搜尋</button>
                    </th>
                    <th class="text-lg-end">
                        <label>輸入搜尋姓名</label>
                    </th>
                    <th>
                        <input type="text" id="txbSelectMemberName" style="width:100%" required />
                    </th>
                    <th class="text-lg-start">
                        <button type="button" id="btnSelectByMemberName" class="btn btn-outline-dark" onclick='selectMember("txbSelectMemberName", "MemberName");'>搜尋</button>
                    </th>
                    <th>
                        <span id="searchWarning" class="text-danger"></span>
                    </th>
                </tr>
                <tr class="bg-gradient text-bg-dark ">
                    <th scope="col">#</th>
                    <th scope="col">Id<button id="sortById" class="btn btnSort" onclick="getSortedMember('sortById', 'UserId')"></button></th>
                    <th scope="col">信箱<button id="sortByEmail" class="btn btnSort" onclick="getSortedMember('sortByEmail', 'Email')"></button></th>
                    <th scope="col">電話<button id="sortByPhone" class="btn btnSort" onclick="getSortedMember('sortByPhone', 'Phone')"></button></th>
                    <th scope="col">姓名<button id="sortByMemberName" class="btn btnSort" onclick="getSortedMember('sortByMemberName', 'MemberName')"></button></th>
                    <th scope="col">狀態<button id="sortByStatus" class="btn btnSort" onclick="getSortedMember('sortByStatus', 'Status')"></button></th>
                    <th scope="col">等級<button id="sortByLevel" class="btn btnSort" onclick="getSortedMember('sortByRole', 'Level')"></button></th>
                    <th scope="col">操作選項</th>
                </tr>
            </thead>
            <tbody>
                <!-- 用來插入用戶資料的行將在這裡 -->
            </tbody>
        </table>
        <nav aria-label="Data navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item"><button class="page-link" id="previousPage" onclick="previousPage()">Previous</button></li>
                <li class="page-item"><button class="page-link" id="firstPage" onclick="firstPage()">1</button></li>
                <li class="page-item ms-1 me-1">...</li>
                <li class="page-item"><button class="page-link" id="currentPage">1</button></li>
                <li class="page-item ms-1 me-1">...</li>
                <li class="page-item"><button class="page-link" id="lastPage" onclick="lastPage()">9</button></li>
                <li class="page-item"><button class="page-link" id="nextPage" onclick="nextPage()">Next</button></li>
            </ul>
        </nav>
        <script>

            let lastSortBtnColumn = "MemberId";
            let lastSortOrder = "Ascending";
            let lastSelect = "";

            getAll();

            function getAll() {
                lastSelect = "";
                getMember("MemberId", 1, "Ascending");
            }

            function firstPage() {
                if (lastSelect === "") {
                    getMember(lastSortBtnColumn, 1, lastSortOrder);
                }
            }

            function previousPage() {
                let oldCurrentPage = document.getElementById("currentPage").innerHTML;

                if (currentPage > 1) {
                    document.getElementById("currentPage").innerHTML = oldCurrentPage - 1
                }

                let newCurrentPage = document.getElementById("currentPage").innerHTML
                if (lastSelect === "") {
                    getMember(lastSortBtnColumn, newCurrentPage, lastSortOrder);
                }
            }

            function nextPage() {
                let oldCurrentPage = document.getElementById("currentPage").innerHTML;
                let maxPage = document.getElementById("lastPage").innerHTML;

                if (oldCurrentPage < maxPage) {
                    document.getElementById("currentPage").innerHTML = oldCurrentPage + 1;
                }

                let newCurrentPage = document.getElementById("currentPage").innerHTML;
                if (lastSelect === "") {
                    getMember(lastSortBtnColumn, newCurrentPage, lastSortOrder);
                }
            }

            function lastPage() {
                let maxPage = document.getElementById("lastPage").innerHTML

                if (lastSelect === "") {
                    getMember(lastSortBtnColumn, maxPage, lastSortOrder);
                }
            }

            function getMember(column, page, sortOrder) {
                lastSortBtnColumn = column;
                lastSortOrder = sortOrder;
                axios.post("/MainMember/GetSortedMember", { Column: column, Page: page, SortOrder: sortOrder })
                    .then(response => {
                        console.log(response.data);
                        if (response.data != "noMember")
                        {
                            populateTable(response.data.Item1);
                            document.getElementById("lastPage").innerHTML = response.data.Item2;
                        }
                    })
                    .catch(error => {
                        console.error("fail", error);
                    })
            }

            function getSortedMember(btnId, column) {
                let btn = document.querySelector(`#${btnId}`);
                let currentBackground = getComputedStyle(btn).backgroundImage;
                let sortOrder;
                let currentPage = document.getElementById("currentPage").innerHTML;
                lastSortBtnColumn = column;

                if (currentBackground.includes('arrowAscending.png')) {
                    sortOrder = 'Descending';
                    btn.style.backgroundImage = "url('../images/arrowDescending.png')";
                }
                else {
                    sortOrder = 'Ascending';
                    btn.style.backgroundImage = "url(../images/arrowAscending.png)";
                }
                lastSortOrder = sortOrder;
                if (lastSelect === "") {
                    console.log(column, currentPage, sortOrder)
                    getUser(column, currentPage, sortOrder);
                }
            }

            function populateTable(members) {
                const tableBody = document.getElementById("memberTable").getElementsByTagName('tbody')[0];

                // 清空表格（如果之前有數據）
                tableBody.innerHTML = '';

                // 遍歷所有用戶，並創建相應的表格行
                members.forEach((member, index) => {
                    const row = document.createElement('tr');  // 創建一行
                    //不想顯示可以用

                    // 創建並填充表格單元格
                    const rowSort = document.createElement('th');
                    rowSort.textContent = index + 1;
                    rowSort.scope = "row";
                    row.appendChild(rowSort);

                    const cellId = document.createElement('td');
                    cellId.textContent = member.MemberId;

                    row.appendChild(cellId);

                    const cellEmail = document.createElement('td');
                    cellEmail.textContent = member.Email;
                    row.appendChild(cellEmail);

                    const cellPhone = document.createElement('td');
                    cellPhone.textContent = member.Phone;
                    row.appendChild(cellPhone);

                    const cellMemberName = document.createElement('td');
                    cellMemberName.textContent = member.MemberName;
                    row.appendChild(cellMemberName);

                    const cellStatus = document.createElement('td');
                    cellStatus.textContent = member.Status ? "啟用" : "禁用";
                    row.appendChild(cellStatus);

                    const cellLevel = document.createElement('td');
                    cellLevel.textContent = member.Level;
                    row.appendChild(cellLevel);

                    const cellEdit = document.createElement('td');

                    const cellEditBtn = document.createElement("button");
                    cellEditBtn.className = "btnEditMember";
                    cellEditBtn.addEventListener("click", function () {
                        let NameOrAcct = document.getElementById("boxPersonalName").innerText;
                        //editMemberLevelAndStatus(user.UserId, NameOrAcct, user.RoleId, user.Status);
                    });
                    cellEdit.appendChild(cellEditBtn);
                    row.appendChild(cellEdit);

                    // 把這一行加到表格中
                    tableBody.appendChild(row);
                });
            }

            function selectMember(txbSelectId, selectColumn) {
                var searchInput = document.getElementById('txbSelectUserId');
                var selectText= searchInput.value;
                var regex = new RegExp(searchInput.pattern);
                lastSelect = selectText;

                if (!regex.test(selectText)) {
                    document.getElementById("searchWarning").innerText = "請輸入8位以內數字";
                    return;
                }

                document.getElementById("searchWarning").innerText = " ";

                axios.post("/MainUser/SelectUser", { UserId: selectUserId })
                    .then(response => {
                        let users = response.data;
                        if (!(users == "noUser")) {

                            if (!Array.isArray(users)) {
                                users = [users];  // 如果是單一物件，將其包裝成陣列
                            }

                            populateTable(users);
                        }
                        else {
                            document.getElementById("userTable").getElementsByTagName('tbody')[0].innerHTML = "";
                        }

                    })
                    .catch(error => {
                        console.error("fail", error);
                    })
            }

        </script>
    </main>
</body>
